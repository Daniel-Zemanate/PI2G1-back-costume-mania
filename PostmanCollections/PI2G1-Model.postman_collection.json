{
	"info": {
		"_postman_id": "2288c8f5-f220-4500-ac74-12dda83ec6cd",
		"name": "PI2G1-Model",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24071944"
	},
	"item": [
		{
			"name": "todos los modelos Activos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Constants\r",
							"const responseJson = pm.response.json();\r",
							"const responseJsonFirst = pm.response.json()[0];\r",
							"\r",
							"// Test to verify the response status\r",
							"pm.test(\"Status OK\", () => {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"});\r",
							"\r",
							"// Tests to verify the response body\r",
							"pm.test(\"The response contains an array of objects\", () => {\r",
							"    pm.expect(responseJson).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"The first object in the array is complete\", () => {\r",
							"    pm.expect(responseJsonFirst.idModel).to.be.a(\"number\");\r",
							"});\r",
							"\r",
							"pm.test(\"The queried data in the first object is of the expected type\", () => {\r",
							"\r",
							"    pm.expect(responseJsonFirst.idModel).to.be.a(\"number\");\r",
							"\r",
							"    pm.expect(responseJsonFirst.nameModel).to.be.a(\"string\");\r",
							"\r",
							"    pm.expect(responseJsonFirst.category).to.be.an(\"object\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{URL-AWS}}:8080/api/v1/model",
					"protocol": "http",
					"host": [
						"{{URL-AWS}}"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"model"
					]
				}
			},
			"response": []
		},
		{
			"name": "todos los modelos Activos/Inactivos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Constants\r",
							"const responseJson = pm.response.json();\r",
							"const responseJsonFirst = pm.response.json()[0];\r",
							"\r",
							"// Test to verify the response status\r",
							"pm.test(\"Status OK\", () => {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"});\r",
							"\r",
							"// Tests to verify the response body\r",
							"pm.test(\"The response contains an array of objects\", () => {\r",
							"    pm.expect(responseJson).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"The first object in the array is complete\", () => {\r",
							"    pm.expect(responseJsonFirst.idModel).to.be.a(\"number\");\r",
							"});\r",
							"\r",
							"pm.test(\"The queried data in the first object is of the expected type\", () => {\r",
							"\r",
							"    pm.expect(responseJsonFirst.idModel).to.be.a(\"number\");\r",
							"\r",
							"    pm.expect(responseJsonFirst.nameModel).to.be.a(\"string\");\r",
							"\r",
							"    pm.expect(responseJsonFirst.category).to.be.an(\"object\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{URL-AWS}}:8080/api/v1/model/all",
					"protocol": "http",
					"host": [
						"{{URL-AWS}}"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"model",
						"all"
					]
				}
			},
			"response": []
		},
		{
			"name": "Active model by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to verify the response status\r",
							"pm.test(\"Status OK\", function () {\r",
							"    pm.response.to.have.status(200); // You can adjust the expected status code as needed\r",
							"});\r",
							"\r",
							"// Test to verify the response structure and data types\r",
							"pm.test(\"Verify the structure of the response\", function () {\r",
							"    const response = pm.response.json();\r",
							"\r",
							"    // Check if the response is an object\r",
							"    pm.expect(response).to.be.an('object');\r",
							"\r",
							"    // Check the properties of the object\r",
							"    pm.expect(response).to.have.property('idModel').to.be.a('number');\r",
							"    pm.expect(response).to.have.property('nameModel').to.be.a('string');\r",
							"    pm.expect(response).to.have.property('category').to.be.an('object');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{URL-AWS}}:8080/api/v1/model/1",
					"protocol": "http",
					"host": [
						"{{URL-AWS}}"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"model",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Active/Inactive model by id ADM",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to verify the response status\r",
							"pm.test(\"Status OK\", function () {\r",
							"    pm.response.to.have.status(200); // You can adjust the expected status code as needed\r",
							"});\r",
							"\r",
							"// Test to verify the response structure and data types\r",
							"pm.test(\"Verify the structure of the response\", function () {\r",
							"    const response = pm.response.json();\r",
							"\r",
							"    // Check if the response is an object\r",
							"    pm.expect(response).to.be.an('object');\r",
							"\r",
							"    // Check the properties of the object\r",
							"    pm.expect(response).to.have.property('idModel').to.be.a('number');\r",
							"    pm.expect(response).to.have.property('nameModel').to.be.a('string');\r",
							"    pm.expect(response).to.have.property('category').to.be.an('object');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{URL-AWS}}:8080/api/v1/model/adm/1",
					"protocol": "http",
					"host": [
						"{{URL-AWS}}"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"model",
						"adm",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Active model by name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to verify the response status\r",
							"pm.test(\"Status OK\", function () {\r",
							"    pm.response.to.have.status(200); // You can adjust the expected status code as needed\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the structure of the response\", function () {\r",
							"    const response = pm.response.json();\r",
							"\r",
							"    response.forEach(function (item){\r",
							"    // Check if the response is an object\r",
							"    pm.expect(item).to.be.an('object');\r",
							"\r",
							"      // Check the properties of the object\r",
							"    pm.expect(item).to.have.property('idModel').to.be.a('number');\r",
							"    pm.expect(item).to.have.property('nameModel').to.be.a('string');\r",
							"    pm.expect(item).to.have.property('category').to.be.an('object');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{URL-AWS}}:8080/api/v1/model/name/Witch%20child",
					"protocol": "http",
					"host": [
						"{{URL-AWS}}"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"model",
						"name",
						"Witch%20child"
					]
				}
			},
			"response": []
		},
		{
			"name": "Active/Inactive model by name ADM",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to verify the response status\r",
							"pm.test(\"Status OK\", function () {\r",
							"    pm.response.to.have.status(200); // You can adjust the expected status code as needed\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the structure of the response\", function () {\r",
							"    const response = pm.response.json();\r",
							"\r",
							"    response.forEach(function (item){\r",
							"    // Check if the response is an object\r",
							"    pm.expect(item).to.be.an('object');\r",
							"\r",
							"      // Check the properties of the object\r",
							"    pm.expect(item).to.have.property('idModel').to.be.a('number');\r",
							"    pm.expect(item).to.have.property('nameModel').to.be.a('string');\r",
							"    pm.expect(item).to.have.property('category').to.be.an('object');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{URL-AWS}}:8080/api/v1/model/adm/name/prueba31",
					"protocol": "http",
					"host": [
						"{{URL-AWS}}"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"model",
						"adm",
						"name",
						"prueba31"
					]
				}
			},
			"response": []
		},
		{
			"name": "Active model by category ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to verify the response status\r",
							"pm.test(\"Status OK\", function () {\r",
							"    pm.response.to.have.status(200); // You can adjust the expected status code as needed\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the structure of the response\", function () {\r",
							"    const response = pm.response.json();\r",
							"\r",
							"    response.forEach(function (item){\r",
							"    // Check if the response is an object\r",
							"    pm.expect(item).to.be.an('object');\r",
							"\r",
							"      // Check the properties of the object\r",
							"    pm.expect(item).to.have.property('idModel').to.be.a('number');\r",
							"    pm.expect(item).to.have.property('nameModel').to.be.a('string');\r",
							"    pm.expect(item).to.have.property('category').to.be.an('object');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{URL-AWS}}:8080/api/v1/model/category/id/1",
					"protocol": "http",
					"host": [
						"{{URL-AWS}}"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"model",
						"category",
						"id",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Active/Inactive model by category ID ADM",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to verify the response status\r",
							"pm.test(\"Status OK\", function () {\r",
							"    pm.response.to.have.status(200); // You can adjust the expected status code as needed\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the structure of the response\", function () {\r",
							"    const response = pm.response.json();\r",
							"\r",
							"    response.forEach(function (item){\r",
							"    // Check if the response is an object\r",
							"    pm.expect(item).to.be.an('object');\r",
							"\r",
							"      // Check the properties of the object\r",
							"    pm.expect(item).to.have.property('idModel').to.be.a('number');\r",
							"    pm.expect(item).to.have.property('nameModel').to.be.a('string');\r",
							"    pm.expect(item).to.have.property('category').to.be.an('object');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{URL-AWS}}:8080/api/v1/model/adm/category/id/1",
					"protocol": "http",
					"host": [
						"{{URL-AWS}}"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"model",
						"adm",
						"category",
						"id",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Active model by name + category id",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{URL-AWS}}:8080/api/v1/model/name/ja/category/2",
					"protocol": "http",
					"host": [
						"{{URL-AWS}}"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"model",
						"name",
						"ja",
						"category",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "create model",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Constants\r",
							"const response = pm.response.json();\r",
							"\r",
							"// Test to verify the response status\r",
							"pm.test(\"Response status code is Ok\", function () {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([201,200,202]);\r",
							"})\r",
							"\r",
							"// Tests to verify the response body\r",
							"pm.test(\"Validate the idModel in the response\", function () {\r",
							"    \r",
							"    pm.expect(response).to.be.an('object');\r",
							"\r",
							"    pm.expect(response.idModel).to.exist.and.to.be.a('number');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameModel\": \"prueba\",\r\n    \"category\": 8,\r\n    \"urlImage\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{URL-AWS}}:8080/api/v1/model/create",
					"protocol": "http",
					"host": [
						"{{URL-AWS}}"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"model",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "update model",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Constants\r",
							"const response = pm.response.json();\r",
							"\r",
							"// Test to verify the response status\r",
							"pm.test(\"Response status code is Ok\", function () {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
							"});\r",
							"\r",
							"// Tests to verify the response body\r",
							"pm.test(\"Validate the idModel field\", function () {\r",
							"\r",
							"    pm.expect(response).to.be.an('object');\r",
							"\r",
							"    pm.expect(response.idModel).to.exist;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nameModel\": \"prueba de modificacion\",\r\n    \"category\": 8,\r\n    \"urlImage\": \"\",\r\n    \"status\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{URL-AWS}}:8080/api/v1/model/35",
					"protocol": "http",
					"host": [
						"{{URL-AWS}}"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"model",
						"35"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to verify the response status\r",
							"pm.test(\"Response status code is Ok\", function () {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([201,200,202]);\r",
							"})\r",
							"\r",
							"pm.test(\"Response message is 'Model item deleted'\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"deleted\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{URL-AWS}}:8080/api/v1/model/delete/35",
					"protocol": "http",
					"host": [
						"{{URL-AWS}}"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"model",
						"delete",
						"35"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete by category",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{URL-AWS}}:8080/api/v1/model/deleteByC/9",
					"protocol": "http",
					"host": [
						"{{URL-AWS}}"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"model",
						"deleteByC",
						"9"
					]
				}
			},
			"response": []
		},
		{
			"name": "DEPRECATED - Active model by category name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to verify the response status\r",
							"pm.test(\"Status OK\", function () {\r",
							"    pm.response.to.have.status(200); // You can adjust the expected status code as needed\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the structure of the response\", function () {\r",
							"    const response = pm.response.json();\r",
							"\r",
							"    response.forEach(function (item){\r",
							"    // Check if the response is an object\r",
							"    pm.expect(item).to.be.an('object');\r",
							"\r",
							"      // Check the properties of the object\r",
							"    pm.expect(item).to.have.property('idModel').to.be.a('number');\r",
							"    pm.expect(item).to.have.property('nameModel').to.be.a('string');\r",
							"    pm.expect(item).to.have.property('category').to.be.an('object');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{URL-AWS}}:8080/api/v1/model/category/sexy",
					"protocol": "http",
					"host": [
						"{{URL-AWS}}"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"model",
						"category",
						"sexy"
					]
				}
			},
			"response": []
		},
		{
			"name": "Los modelos más recientes (news)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Constants\r",
							"const responseJson = pm.response.json();\r",
							"const responseJsonFirst = pm.response.json()[0];\r",
							"\r",
							"// Test to verify the response status\r",
							"pm.test(\"Status OK\", () => {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"});\r",
							"\r",
							"// Tests to verify the response body\r",
							"pm.test(\"The response contains an array of objects\", () => {\r",
							"    pm.expect(responseJson).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"The first object in the array is complete\", () => {\r",
							"    pm.expect(responseJsonFirst.idModel).to.be.a(\"number\");\r",
							"});\r",
							"\r",
							"pm.test(\"The queried data in the first object is of the expected type\", () => {\r",
							"\r",
							"    pm.expect(responseJsonFirst.idModel).to.be.a(\"number\");\r",
							"\r",
							"    pm.expect(responseJsonFirst.nameModel).to.be.a(\"string\");\r",
							"\r",
							"    pm.expect(responseJsonFirst.category).to.be.an(\"object\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{URL-AWS}}:8080/api/v1/model/news/12",
					"protocol": "http",
					"host": [
						"{{URL-AWS}}"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"model",
						"news",
						"12"
					]
				}
			},
			"response": []
		}
	]
}